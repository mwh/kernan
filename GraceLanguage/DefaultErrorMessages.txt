# To provide distribution-specific error messages, create a file
# in this format called "OverlayErrorMessages.txt". To add
# per-user overrides, create UserErrorMessages.txt and place it
# in the per-user import root.
P1000 Unable to consume input: stuck at token ${token}
P1001 Unexpected end of file, expecting '${expected}'
P1002 Unexpected ${found}, expected ${expected}
P1003 Other code cannot follow a semicolon on the same line
P1004 Unexpected code on line after statement completed: token ${token}
P1005 A 'var' declaration must use ':=', not '='
P1006 A 'def' declaration must use '=', not ':='
P1007 Generic parameter list not terminated: expected a '>'
P1009 Unexpected operator in type name, expected '[[' or '='
P1010 Indentation must increase inside a type body: indentation was ${previous indent}, but the new indentation is only ${new indent}
P1011 Indentation must increase inside {}: indentation was ${previous indent}, but the new indentation is only ${new indent}
P1012 Unexpected operator '${operator}' in parameter list: expected identifier
P1013 Unexpected ${token} in parameter list: expected either ',' or end of list '${end}'
P1014 String interpolation with '{}' used inside import path; import path must be a literal string
P1015 String interpolation with '{}' used inside dialect path; dialect path must be a literal string
P1016 Indentation mismatch: indentation is ${given indentation}, but ${required indentation} required
P1017 Parenthesised expression does not have closing parenthesis
P1018 Term expected, but unexpected token ${token} found
P1019 Interpolated expression in string not terminated with '}'
P1020 Infix operator '${operator}' must have spaces around it
P1021 'object' must have body written in {} afterwards
P1022 Block parameter list contained unexpected symbol ${token}
P1023 Unexpected ${token} in argument list: expected either ',' or ')'
P1024 Unexpected ${token} in generic argument list: expected either ',' or '>'
P1025 Unexpected ${token} after '.': expected identifier
P1026 Only the arithmetic operators +, -, *, / can be mixed together. To use '${operator}' in combination with others the expression must be disambiguated with parentheses.
P1027 Invalid destructuring pattern match: pattern names cannot be multi-part.
P1028 Bracketing request does not have matching brackets: request opening with '${start}' must end with '${expected}', not '${found}'.
P1029 Closing brace '}' found without an opening brace first.
P1030 Indented continuation line begins with '${token}', which cannot continue the previous line.
P1031 Expected a parameter name, but found '${found}' instead.
P1032 Expected a method name, but saw '${found} instead.
P1033 Bracketing method names must be symmetrical: should be '${expected}', but saw '${found}' instead of closing half.
P1034 Expected a type name to declare, but saw '${found}' instead.
P1035 Empty interpolation '{}'.
P1036 Empty parentheses '()' have no value.
P1037 Expected annotation in 'is' list, but saw '${token}' instead.
P1038 Assignment with ':=' must have space before following prefix operator. Did you mean ':= ${rest}'?
P1039 Variadic *parameter must be at end of parameter list, but saw '${found}' afterwards.
P1040 Part '${part}' of method request needs an argument list.
P1042 The 'outer' keyword must always be followed by a '.' and method name or an operator, not ${found}.
P1043 The name '${name}' can only be used to make parent requests here, and must be followed by an operator or a '.' and a method name.
P1044 Cannot assign to a '${lhs}' with ':='.
P1045 Only method requests can be inherited from, not literals.
P1046 Cannot have ${token} inside ${context}.
P1047 Declaration of binary operator '${op}' requires exactly one parameter.

L0000 Character ${codepoint} (${name}) may not appear here
L0001 Tab characters are not permitted in the source code
L0002 Whitespace character ${codepoint} (${name}) is not permitted in the source code
L0003 Control character ${codepoint} (${name}) is not permitted in the source code
L0004 Not a valid digit in base ${base}: '${digit}'
L0005 No digits in number
L0006 Unterminated string literal: expected '"'
L0007 Illegal lone surrogate
L0008 Unknown escape character ${escape}
L0009 Bracket operators must start and end with a bracketing character, not '${char}'
L0010 Cannot end an opening bracket sequence with '${char}'.
L0011 String literal continues past end of line.
L0012 Base ${base} is not supported; must be in range 2-36.
L0013 Unicode escape invalid: required ${length} hexadecimal digits 0-9 A-F after \${u}, but found «${error}» instead.

R2000 LookupError: Method «${method}» not found in object «${receiver}»
R2001 ArgumentTypeError: Method «${method}» requires ${required} as argument ${index} of part «${part}»
R2002 |[ bind == "yes" ]| |[ found != "" ]| LookupError: ${method} is not valid; «${found}» exists but cannot be assigned to with :=.
R2002 |[ method_ == "this" ]| LookupError: No receiver found for «${method}»; did you mean to use "self" instead?
R2002 LookupError: No receiver found for ${method}
R2003 AccessibilityError: Confidential method «${method}» cannot be accessed from outside the object
R2004 InsufficientArgumentsError: Part «${part}» of method «${method}» requires ${need} arguments, but only ${have} provided
R2005 LookupError: Could not find module "${path}" to import
R2006 SurplusArgumentsError: Part «${part}» of method «${method}» can only accept ${need} arguments, but ${have} provided
R2008 UninitialisedReadError: Cannot read from «${name}» because it has never been initialised.
R2009 IllegalReturnError: Cannot return from «${method}» because it has already returned.
R2010 LookupError: No resource handler found for "${extension}" in import "${path}".
R2011 CyclicImportError: Module "${path}" transitively imports itself. The chain of imports ${chain} cannot be satisfied as it would require accessing ${path} before it was ready.
R2012 |[ dividend == "0" ]| ZeroDivisionError: Zero divided by zero is indeterminate.
R2012 ZeroDivisionError: Division by zero is undefined.
R2013 |[ valid != "" ]| IndexError: ${index} is not a valid index. Valid indices are ${valid}.
R2013 IndexError: ${index} is not a valid index.
R2016 IllegalReturnError: Cannot return from top level of a module.
R2017 InheritanceError: The method «${method}» does not return an object that can be inherited.
R2018 IllegalReturnError: Cannot return from a finally block that an exception has already bypassed.
R2019 InheritanceError: No such method «${method}» exists to alias.
R2020 InheritanceError: No such method «${method}» exists to exclude.
R2021 InheritanceError: Method «${method}» is abstract and must be given a definition or excluded.
R2022 InheritanceError: Method «${method}» was provided two or more times by inheritance and must be given an overriding definition or have all but one version excluded.
R2023 MatchingError: Matching block declares ${parameter count} parameters but ${binding count} bindings were accrued through matching. Declared parameters were: ${parameters}.
R2024 RecursionError: Maximum recursion depth exceeded.
R2025 TypeError: ${field} can only hold ${required}.

D9000 The dialect found problems with this module and did not let it run.
